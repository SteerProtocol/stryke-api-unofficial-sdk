/* tslint:disable */
/* eslint-disable */
/**
 * Stryke API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PurchaseHistoryResponseDto,
  PurchasePositionsResponseDto,
  QuoteResponseDto,
} from '../models/index';
import {
    PurchaseHistoryResponseDtoFromJSON,
    PurchaseHistoryResponseDtoToJSON,
    PurchasePositionsResponseDtoFromJSON,
    PurchasePositionsResponseDtoToJSON,
    QuoteResponseDtoFromJSON,
    QuoteResponseDtoToJSON,
} from '../models/index';

export interface PurchaseControllerGetHistoryRequest {
    chainId: PurchaseControllerGetHistoryChainIdEnum;
    optionMarket: string;
    user: string;
    first: PurchaseControllerGetHistoryFirstEnum;
    skip: PurchaseControllerGetHistorySkipEnum;
}

export interface PurchaseControllerGetPurchasePositionsRequest {
    chainId: PurchaseControllerGetPurchasePositionsChainIdEnum;
    optionMarket: string;
    user: string;
    first: PurchaseControllerGetPurchasePositionsFirstEnum;
    skip: PurchaseControllerGetPurchasePositionsSkipEnum;
}

export interface PurchaseControllerGetQuoteRequest {
    chainId: PurchaseControllerGetQuoteChainIdEnum;
    optionMarket: string;
    user: string;
    strike: number;
    markPrice: number;
    type: PurchaseControllerGetQuoteTypeEnum;
    amount: number;
    ttl: number;
}

/**
 * 
 */
export class PurchaseApi extends runtime.BaseAPI {

    /**
     * Get history of options purchases for a user
     */
    async purchaseControllerGetHistoryRaw(requestParameters: PurchaseControllerGetHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PurchaseHistoryResponseDto>>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling purchaseControllerGetHistory().'
            );
        }

        if (requestParameters['optionMarket'] == null) {
            throw new runtime.RequiredError(
                'optionMarket',
                'Required parameter "optionMarket" was null or undefined when calling purchaseControllerGetHistory().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling purchaseControllerGetHistory().'
            );
        }

        if (requestParameters['first'] == null) {
            throw new runtime.RequiredError(
                'first',
                'Required parameter "first" was null or undefined when calling purchaseControllerGetHistory().'
            );
        }

        if (requestParameters['skip'] == null) {
            throw new runtime.RequiredError(
                'skip',
                'Required parameter "skip" was null or undefined when calling purchaseControllerGetHistory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        if (requestParameters['optionMarket'] != null) {
            queryParameters['optionMarket'] = requestParameters['optionMarket'];
        }

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clamm/purchase/history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PurchaseHistoryResponseDtoFromJSON));
    }

    /**
     * Get history of options purchases for a user
     */
    async purchaseControllerGetHistory(requestParameters: PurchaseControllerGetHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PurchaseHistoryResponseDto>> {
        const response = await this.purchaseControllerGetHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get current options positions of a user
     */
    async purchaseControllerGetPurchasePositionsRaw(requestParameters: PurchaseControllerGetPurchasePositionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PurchasePositionsResponseDto>>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling purchaseControllerGetPurchasePositions().'
            );
        }

        if (requestParameters['optionMarket'] == null) {
            throw new runtime.RequiredError(
                'optionMarket',
                'Required parameter "optionMarket" was null or undefined when calling purchaseControllerGetPurchasePositions().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling purchaseControllerGetPurchasePositions().'
            );
        }

        if (requestParameters['first'] == null) {
            throw new runtime.RequiredError(
                'first',
                'Required parameter "first" was null or undefined when calling purchaseControllerGetPurchasePositions().'
            );
        }

        if (requestParameters['skip'] == null) {
            throw new runtime.RequiredError(
                'skip',
                'Required parameter "skip" was null or undefined when calling purchaseControllerGetPurchasePositions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        if (requestParameters['optionMarket'] != null) {
            queryParameters['optionMarket'] = requestParameters['optionMarket'];
        }

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clamm/purchase/positions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PurchasePositionsResponseDtoFromJSON));
    }

    /**
     * Get current options positions of a user
     */
    async purchaseControllerGetPurchasePositions(requestParameters: PurchaseControllerGetPurchasePositionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PurchasePositionsResponseDto>> {
        const response = await this.purchaseControllerGetPurchasePositionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get quote for purchasing options
     */
    async purchaseControllerGetQuoteRaw(requestParameters: PurchaseControllerGetQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<QuoteResponseDto>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling purchaseControllerGetQuote().'
            );
        }

        if (requestParameters['optionMarket'] == null) {
            throw new runtime.RequiredError(
                'optionMarket',
                'Required parameter "optionMarket" was null or undefined when calling purchaseControllerGetQuote().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling purchaseControllerGetQuote().'
            );
        }

        if (requestParameters['strike'] == null) {
            throw new runtime.RequiredError(
                'strike',
                'Required parameter "strike" was null or undefined when calling purchaseControllerGetQuote().'
            );
        }

        if (requestParameters['markPrice'] == null) {
            throw new runtime.RequiredError(
                'markPrice',
                'Required parameter "markPrice" was null or undefined when calling purchaseControllerGetQuote().'
            );
        }

        if (requestParameters['type'] == null) {
            throw new runtime.RequiredError(
                'type',
                'Required parameter "type" was null or undefined when calling purchaseControllerGetQuote().'
            );
        }

        if (requestParameters['amount'] == null) {
            throw new runtime.RequiredError(
                'amount',
                'Required parameter "amount" was null or undefined when calling purchaseControllerGetQuote().'
            );
        }

        if (requestParameters['ttl'] == null) {
            throw new runtime.RequiredError(
                'ttl',
                'Required parameter "ttl" was null or undefined when calling purchaseControllerGetQuote().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        if (requestParameters['optionMarket'] != null) {
            queryParameters['optionMarket'] = requestParameters['optionMarket'];
        }

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        if (requestParameters['strike'] != null) {
            queryParameters['strike'] = requestParameters['strike'];
        }

        if (requestParameters['markPrice'] != null) {
            queryParameters['markPrice'] = requestParameters['markPrice'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['amount'] != null) {
            queryParameters['amount'] = requestParameters['amount'];
        }

        if (requestParameters['ttl'] != null) {
            queryParameters['ttl'] = requestParameters['ttl'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clamm/purchase/quote`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => QuoteResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get quote for purchasing options
     */
    async purchaseControllerGetQuote(requestParameters: PurchaseControllerGetQuoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<QuoteResponseDto> {
        const response = await this.purchaseControllerGetQuoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PurchaseControllerGetHistoryChainIdEnum = {
    NUMBER_5000: 5000,
    NUMBER_42161: 42161
} as const;
export type PurchaseControllerGetHistoryChainIdEnum = typeof PurchaseControllerGetHistoryChainIdEnum[keyof typeof PurchaseControllerGetHistoryChainIdEnum];
/**
 * @export
 */
export const PurchaseControllerGetHistoryFirstEnum = {
    NUMBER_100: 100,
    NUMBER_200: 200,
    NUMBER_300: 300
} as const;
export type PurchaseControllerGetHistoryFirstEnum = typeof PurchaseControllerGetHistoryFirstEnum[keyof typeof PurchaseControllerGetHistoryFirstEnum];
/**
 * @export
 */
export const PurchaseControllerGetHistorySkipEnum = {
    NUMBER_0: 0,
    NUMBER_100: 100,
    NUMBER_200: 200
} as const;
export type PurchaseControllerGetHistorySkipEnum = typeof PurchaseControllerGetHistorySkipEnum[keyof typeof PurchaseControllerGetHistorySkipEnum];
/**
 * @export
 */
export const PurchaseControllerGetPurchasePositionsChainIdEnum = {
    NUMBER_5000: 5000,
    NUMBER_42161: 42161
} as const;
export type PurchaseControllerGetPurchasePositionsChainIdEnum = typeof PurchaseControllerGetPurchasePositionsChainIdEnum[keyof typeof PurchaseControllerGetPurchasePositionsChainIdEnum];
/**
 * @export
 */
export const PurchaseControllerGetPurchasePositionsFirstEnum = {
    NUMBER_100: 100,
    NUMBER_200: 200,
    NUMBER_300: 300
} as const;
export type PurchaseControllerGetPurchasePositionsFirstEnum = typeof PurchaseControllerGetPurchasePositionsFirstEnum[keyof typeof PurchaseControllerGetPurchasePositionsFirstEnum];
/**
 * @export
 */
export const PurchaseControllerGetPurchasePositionsSkipEnum = {
    NUMBER_0: 0,
    NUMBER_100: 100,
    NUMBER_200: 200
} as const;
export type PurchaseControllerGetPurchasePositionsSkipEnum = typeof PurchaseControllerGetPurchasePositionsSkipEnum[keyof typeof PurchaseControllerGetPurchasePositionsSkipEnum];
/**
 * @export
 */
export const PurchaseControllerGetQuoteChainIdEnum = {
    NUMBER_5000: 5000,
    NUMBER_42161: 42161
} as const;
export type PurchaseControllerGetQuoteChainIdEnum = typeof PurchaseControllerGetQuoteChainIdEnum[keyof typeof PurchaseControllerGetQuoteChainIdEnum];
/**
 * @export
 */
export const PurchaseControllerGetQuoteTypeEnum = {
    Call: 'call',
    Put: 'put'
} as const;
export type PurchaseControllerGetQuoteTypeEnum = typeof PurchaseControllerGetQuoteTypeEnum[keyof typeof PurchaseControllerGetQuoteTypeEnum];
