/* tslint:disable */
/* eslint-disable */
/**
 * Stryke API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OptionMarketsResponseDtoV1,
  OptionMarketsResponseDtoV2,
} from '../models/index';
import {
    OptionMarketsResponseDtoV1FromJSON,
    OptionMarketsResponseDtoV1ToJSON,
    OptionMarketsResponseDtoV2FromJSON,
    OptionMarketsResponseDtoV2ToJSON,
} from '../models/index';

export interface OptionMarketsControllerGetOptionMarketsRequest {
    chainId: OptionMarketsControllerGetOptionMarketsChainIdEnum;
}

export interface OptionMarketsControllerGetOptionMarketsV2Request {
    chains: Array<string>;
}

/**
 * 
 */
export class OptionMarketsApi extends runtime.BaseAPI {

    /**
     * Get option markets on a chain
     */
    async optionMarketsControllerGetOptionMarketsRaw(requestParameters: OptionMarketsControllerGetOptionMarketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OptionMarketsResponseDtoV1>>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling optionMarketsControllerGetOptionMarkets().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clamm/option-markets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OptionMarketsResponseDtoV1FromJSON));
    }

    /**
     * Get option markets on a chain
     */
    async optionMarketsControllerGetOptionMarkets(requestParameters: OptionMarketsControllerGetOptionMarketsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OptionMarketsResponseDtoV1>> {
        const response = await this.optionMarketsControllerGetOptionMarketsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get option markets on chains specified
     */
    async optionMarketsControllerGetOptionMarketsV2Raw(requestParameters: OptionMarketsControllerGetOptionMarketsV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OptionMarketsResponseDtoV2>>> {
        if (requestParameters['chains'] == null) {
            throw new runtime.RequiredError(
                'chains',
                'Required parameter "chains" was null or undefined when calling optionMarketsControllerGetOptionMarketsV2().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chains'] != null) {
            queryParameters['chains'] = requestParameters['chains'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1.1/clamm/option-markets`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OptionMarketsResponseDtoV2FromJSON));
    }

    /**
     * Get option markets on chains specified
     */
    async optionMarketsControllerGetOptionMarketsV2(requestParameters: OptionMarketsControllerGetOptionMarketsV2Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OptionMarketsResponseDtoV2>> {
        const response = await this.optionMarketsControllerGetOptionMarketsV2Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const OptionMarketsControllerGetOptionMarketsChainIdEnum = {
    NUMBER_5000: 5000,
    NUMBER_42161: 42161
} as const;
export type OptionMarketsControllerGetOptionMarketsChainIdEnum = typeof OptionMarketsControllerGetOptionMarketsChainIdEnum[keyof typeof OptionMarketsControllerGetOptionMarketsChainIdEnum];
