/* tslint:disable */
/* eslint-disable */
/**
 * Stryke API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DepositHistoryResponseDto,
  DepositPositionsResponseDto,
  PrepareDepositResponseDto,
} from '../models/index';
import {
    DepositHistoryResponseDtoFromJSON,
    DepositHistoryResponseDtoToJSON,
    DepositPositionsResponseDtoFromJSON,
    DepositPositionsResponseDtoToJSON,
    PrepareDepositResponseDtoFromJSON,
    PrepareDepositResponseDtoToJSON,
} from '../models/index';

export interface DepositControllerGetHistoryRequest {
    chainId: DepositControllerGetHistoryChainIdEnum;
    first: DepositControllerGetHistoryFirstEnum;
    skip: DepositControllerGetHistorySkipEnum;
    pool: string;
    user: string;
}

export interface DepositControllerGetPositionsRequest {
    chainId: DepositControllerGetPositionsChainIdEnum;
    first: DepositControllerGetPositionsFirstEnum;
    skip: DepositControllerGetPositionsSkipEnum;
    pool: string;
    user: string;
}

export interface DepositControllerPrepareDepositRequest {
    chainId: DepositControllerPrepareDepositChainIdEnum;
    pool: string;
    hook: string;
    handler: string;
    maxStrike: number;
    minStrike: number;
    optionsAmount: number;
}

/**
 * 
 */
export class DepositApi extends runtime.BaseAPI {

    /**
     * Get history of deposit activity
     */
    async depositControllerGetHistoryRaw(requestParameters: DepositControllerGetHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DepositHistoryResponseDto>>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling depositControllerGetHistory().'
            );
        }

        if (requestParameters['first'] == null) {
            throw new runtime.RequiredError(
                'first',
                'Required parameter "first" was null or undefined when calling depositControllerGetHistory().'
            );
        }

        if (requestParameters['skip'] == null) {
            throw new runtime.RequiredError(
                'skip',
                'Required parameter "skip" was null or undefined when calling depositControllerGetHistory().'
            );
        }

        if (requestParameters['pool'] == null) {
            throw new runtime.RequiredError(
                'pool',
                'Required parameter "pool" was null or undefined when calling depositControllerGetHistory().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling depositControllerGetHistory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['pool'] != null) {
            queryParameters['pool'] = requestParameters['pool'];
        }

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clamm/deposit/history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DepositHistoryResponseDtoFromJSON));
    }

    /**
     * Get history of deposit activity
     */
    async depositControllerGetHistory(requestParameters: DepositControllerGetHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DepositHistoryResponseDto>> {
        const response = await this.depositControllerGetHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get current deposit positions
     */
    async depositControllerGetPositionsRaw(requestParameters: DepositControllerGetPositionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DepositPositionsResponseDto>>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling depositControllerGetPositions().'
            );
        }

        if (requestParameters['first'] == null) {
            throw new runtime.RequiredError(
                'first',
                'Required parameter "first" was null or undefined when calling depositControllerGetPositions().'
            );
        }

        if (requestParameters['skip'] == null) {
            throw new runtime.RequiredError(
                'skip',
                'Required parameter "skip" was null or undefined when calling depositControllerGetPositions().'
            );
        }

        if (requestParameters['pool'] == null) {
            throw new runtime.RequiredError(
                'pool',
                'Required parameter "pool" was null or undefined when calling depositControllerGetPositions().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling depositControllerGetPositions().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        if (requestParameters['pool'] != null) {
            queryParameters['pool'] = requestParameters['pool'];
        }

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clamm/deposit/positions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DepositPositionsResponseDtoFromJSON));
    }

    /**
     * Get current deposit positions
     */
    async depositControllerGetPositions(requestParameters: DepositControllerGetPositionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DepositPositionsResponseDto>> {
        const response = await this.depositControllerGetPositionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Prepare a executable transaction and a summary for providing liquidity into CLAMM
     */
    async depositControllerPrepareDepositRaw(requestParameters: DepositControllerPrepareDepositRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrepareDepositResponseDto>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling depositControllerPrepareDeposit().'
            );
        }

        if (requestParameters['pool'] == null) {
            throw new runtime.RequiredError(
                'pool',
                'Required parameter "pool" was null or undefined when calling depositControllerPrepareDeposit().'
            );
        }

        if (requestParameters['hook'] == null) {
            throw new runtime.RequiredError(
                'hook',
                'Required parameter "hook" was null or undefined when calling depositControllerPrepareDeposit().'
            );
        }

        if (requestParameters['handler'] == null) {
            throw new runtime.RequiredError(
                'handler',
                'Required parameter "handler" was null or undefined when calling depositControllerPrepareDeposit().'
            );
        }

        if (requestParameters['maxStrike'] == null) {
            throw new runtime.RequiredError(
                'maxStrike',
                'Required parameter "maxStrike" was null or undefined when calling depositControllerPrepareDeposit().'
            );
        }

        if (requestParameters['minStrike'] == null) {
            throw new runtime.RequiredError(
                'minStrike',
                'Required parameter "minStrike" was null or undefined when calling depositControllerPrepareDeposit().'
            );
        }

        if (requestParameters['optionsAmount'] == null) {
            throw new runtime.RequiredError(
                'optionsAmount',
                'Required parameter "optionsAmount" was null or undefined when calling depositControllerPrepareDeposit().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        if (requestParameters['pool'] != null) {
            queryParameters['pool'] = requestParameters['pool'];
        }

        if (requestParameters['hook'] != null) {
            queryParameters['hook'] = requestParameters['hook'];
        }

        if (requestParameters['handler'] != null) {
            queryParameters['handler'] = requestParameters['handler'];
        }

        if (requestParameters['maxStrike'] != null) {
            queryParameters['maxStrike'] = requestParameters['maxStrike'];
        }

        if (requestParameters['minStrike'] != null) {
            queryParameters['minStrike'] = requestParameters['minStrike'];
        }

        if (requestParameters['optionsAmount'] != null) {
            queryParameters['optionsAmount'] = requestParameters['optionsAmount'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clamm/deposit/prepare`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrepareDepositResponseDtoFromJSON(jsonValue));
    }

    /**
     * Prepare a executable transaction and a summary for providing liquidity into CLAMM
     */
    async depositControllerPrepareDeposit(requestParameters: DepositControllerPrepareDepositRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrepareDepositResponseDto> {
        const response = await this.depositControllerPrepareDepositRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const DepositControllerGetHistoryChainIdEnum = {
    NUMBER_5000: 5000,
    NUMBER_42161: 42161
} as const;
export type DepositControllerGetHistoryChainIdEnum = typeof DepositControllerGetHistoryChainIdEnum[keyof typeof DepositControllerGetHistoryChainIdEnum];
/**
 * @export
 */
export const DepositControllerGetHistoryFirstEnum = {
    NUMBER_100: 100,
    NUMBER_200: 200,
    NUMBER_300: 300
} as const;
export type DepositControllerGetHistoryFirstEnum = typeof DepositControllerGetHistoryFirstEnum[keyof typeof DepositControllerGetHistoryFirstEnum];
/**
 * @export
 */
export const DepositControllerGetHistorySkipEnum = {
    NUMBER_0: 0,
    NUMBER_100: 100,
    NUMBER_200: 200
} as const;
export type DepositControllerGetHistorySkipEnum = typeof DepositControllerGetHistorySkipEnum[keyof typeof DepositControllerGetHistorySkipEnum];
/**
 * @export
 */
export const DepositControllerGetPositionsChainIdEnum = {
    NUMBER_5000: 5000,
    NUMBER_42161: 42161
} as const;
export type DepositControllerGetPositionsChainIdEnum = typeof DepositControllerGetPositionsChainIdEnum[keyof typeof DepositControllerGetPositionsChainIdEnum];
/**
 * @export
 */
export const DepositControllerGetPositionsFirstEnum = {
    NUMBER_100: 100,
    NUMBER_200: 200,
    NUMBER_300: 300
} as const;
export type DepositControllerGetPositionsFirstEnum = typeof DepositControllerGetPositionsFirstEnum[keyof typeof DepositControllerGetPositionsFirstEnum];
/**
 * @export
 */
export const DepositControllerGetPositionsSkipEnum = {
    NUMBER_0: 0,
    NUMBER_100: 100,
    NUMBER_200: 200
} as const;
export type DepositControllerGetPositionsSkipEnum = typeof DepositControllerGetPositionsSkipEnum[keyof typeof DepositControllerGetPositionsSkipEnum];
/**
 * @export
 */
export const DepositControllerPrepareDepositChainIdEnum = {
    NUMBER_5000: 5000,
    NUMBER_42161: 42161
} as const;
export type DepositControllerPrepareDepositChainIdEnum = typeof DepositControllerPrepareDepositChainIdEnum[keyof typeof DepositControllerPrepareDepositChainIdEnum];
