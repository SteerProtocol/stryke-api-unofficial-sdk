/* tslint:disable */
/* eslint-disable */
/**
 * Stryke API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FeesResponseDto,
  PnlDeltaResponseDto,
} from '../models/index';
import {
    FeesResponseDtoFromJSON,
    FeesResponseDtoToJSON,
    PnlDeltaResponseDtoFromJSON,
    PnlDeltaResponseDtoToJSON,
} from '../models/index';

export interface StatsControllerGetDauRequest {
    chainId: StatsControllerGetDauChainIdEnum;
    optionMarket: string;
    from: number;
    to: number;
}

export interface StatsControllerGetFeesRequest {
    chainId: StatsControllerGetFeesChainIdEnum;
    optionMarket: string;
    from: number;
    to: number;
}

export interface StatsControllerGetOpenInterestRequest {
    chainId: StatsControllerGetOpenInterestChainIdEnum;
    optionMarket: string;
}

export interface StatsControllerGetPnlDeltaRequest {
    chains: Array<string>;
    user: string;
    from: number;
    to: number;
}

export interface StatsControllerGetTvlRequest {
    chainId: StatsControllerGetTvlChainIdEnum;
    optionMarket: string;
}

export interface StatsControllerGetTvlForPoolRequest {
    chainId: StatsControllerGetTvlForPoolChainIdEnum;
    pool: string;
}

export interface StatsControllerGetVolumeRequest {
    chainId: StatsControllerGetVolumeChainIdEnum;
    optionMarket: string;
    from: number;
    to: number;
}

/**
 * 
 */
export class StatsApi extends runtime.BaseAPI {

    /**
     * Get number of unique users
     */
    async statsControllerGetDauRaw(requestParameters: StatsControllerGetDauRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling statsControllerGetDau().'
            );
        }

        if (requestParameters['optionMarket'] == null) {
            throw new runtime.RequiredError(
                'optionMarket',
                'Required parameter "optionMarket" was null or undefined when calling statsControllerGetDau().'
            );
        }

        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling statsControllerGetDau().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling statsControllerGetDau().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        if (requestParameters['optionMarket'] != null) {
            queryParameters['optionMarket'] = requestParameters['optionMarket'];
        }

        if (requestParameters['from'] != null) {
            queryParameters['from'] = requestParameters['from'];
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = requestParameters['to'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clamm/stats/dau`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get number of unique users
     */
    async statsControllerGetDau(requestParameters: StatsControllerGetDauRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.statsControllerGetDauRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get premium and protocol fees earned by a options market
     */
    async statsControllerGetFeesRaw(requestParameters: StatsControllerGetFeesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeesResponseDto>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling statsControllerGetFees().'
            );
        }

        if (requestParameters['optionMarket'] == null) {
            throw new runtime.RequiredError(
                'optionMarket',
                'Required parameter "optionMarket" was null or undefined when calling statsControllerGetFees().'
            );
        }

        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling statsControllerGetFees().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling statsControllerGetFees().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        if (requestParameters['optionMarket'] != null) {
            queryParameters['optionMarket'] = requestParameters['optionMarket'];
        }

        if (requestParameters['from'] != null) {
            queryParameters['from'] = requestParameters['from'];
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = requestParameters['to'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clamm/stats/fees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeesResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get premium and protocol fees earned by a options market
     */
    async statsControllerGetFees(requestParameters: StatsControllerGetFeesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeesResponseDto> {
        const response = await this.statsControllerGetFeesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get current open interest of a options market
     */
    async statsControllerGetOpenInterestRaw(requestParameters: StatsControllerGetOpenInterestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling statsControllerGetOpenInterest().'
            );
        }

        if (requestParameters['optionMarket'] == null) {
            throw new runtime.RequiredError(
                'optionMarket',
                'Required parameter "optionMarket" was null or undefined when calling statsControllerGetOpenInterest().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        if (requestParameters['optionMarket'] != null) {
            queryParameters['optionMarket'] = requestParameters['optionMarket'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clamm/stats/open-interest`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get current open interest of a options market
     */
    async statsControllerGetOpenInterest(requestParameters: StatsControllerGetOpenInterestRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.statsControllerGetOpenInterestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get trade performance of a user on specified chains
     */
    async statsControllerGetPnlDeltaRaw(requestParameters: StatsControllerGetPnlDeltaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PnlDeltaResponseDto>>> {
        if (requestParameters['chains'] == null) {
            throw new runtime.RequiredError(
                'chains',
                'Required parameter "chains" was null or undefined when calling statsControllerGetPnlDelta().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling statsControllerGetPnlDelta().'
            );
        }

        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling statsControllerGetPnlDelta().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling statsControllerGetPnlDelta().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chains'] != null) {
            queryParameters['chains'] = requestParameters['chains'];
        }

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        if (requestParameters['from'] != null) {
            queryParameters['from'] = requestParameters['from'];
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = requestParameters['to'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clamm/stats/delta`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PnlDeltaResponseDtoFromJSON));
    }

    /**
     * Get trade performance of a user on specified chains
     */
    async statsControllerGetPnlDelta(requestParameters: StatsControllerGetPnlDeltaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PnlDeltaResponseDto>> {
        const response = await this.statsControllerGetPnlDeltaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get total value locked in a options market
     */
    async statsControllerGetTvlRaw(requestParameters: StatsControllerGetTvlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling statsControllerGetTvl().'
            );
        }

        if (requestParameters['optionMarket'] == null) {
            throw new runtime.RequiredError(
                'optionMarket',
                'Required parameter "optionMarket" was null or undefined when calling statsControllerGetTvl().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        if (requestParameters['optionMarket'] != null) {
            queryParameters['optionMarket'] = requestParameters['optionMarket'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clamm/stats/tvl`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get total value locked in a options market
     */
    async statsControllerGetTvl(requestParameters: StatsControllerGetTvlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.statsControllerGetTvlRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get total value locked in a pool specific to CLAMM
     */
    async statsControllerGetTvlForPoolRaw(requestParameters: StatsControllerGetTvlForPoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling statsControllerGetTvlForPool().'
            );
        }

        if (requestParameters['pool'] == null) {
            throw new runtime.RequiredError(
                'pool',
                'Required parameter "pool" was null or undefined when calling statsControllerGetTvlForPool().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clamm/stats/tvl/{pool}`.replace(`{${"pool"}}`, encodeURIComponent(String(requestParameters['pool']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get total value locked in a pool specific to CLAMM
     */
    async statsControllerGetTvlForPool(requestParameters: StatsControllerGetTvlForPoolRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.statsControllerGetTvlForPoolRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get volume generated by a options market
     */
    async statsControllerGetVolumeRaw(requestParameters: StatsControllerGetVolumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling statsControllerGetVolume().'
            );
        }

        if (requestParameters['optionMarket'] == null) {
            throw new runtime.RequiredError(
                'optionMarket',
                'Required parameter "optionMarket" was null or undefined when calling statsControllerGetVolume().'
            );
        }

        if (requestParameters['from'] == null) {
            throw new runtime.RequiredError(
                'from',
                'Required parameter "from" was null or undefined when calling statsControllerGetVolume().'
            );
        }

        if (requestParameters['to'] == null) {
            throw new runtime.RequiredError(
                'to',
                'Required parameter "to" was null or undefined when calling statsControllerGetVolume().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        if (requestParameters['optionMarket'] != null) {
            queryParameters['optionMarket'] = requestParameters['optionMarket'];
        }

        if (requestParameters['from'] != null) {
            queryParameters['from'] = requestParameters['from'];
        }

        if (requestParameters['to'] != null) {
            queryParameters['to'] = requestParameters['to'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clamm/stats/volume`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get volume generated by a options market
     */
    async statsControllerGetVolume(requestParameters: StatsControllerGetVolumeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.statsControllerGetVolumeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const StatsControllerGetDauChainIdEnum = {
    NUMBER_5000: 5000,
    NUMBER_42161: 42161
} as const;
export type StatsControllerGetDauChainIdEnum = typeof StatsControllerGetDauChainIdEnum[keyof typeof StatsControllerGetDauChainIdEnum];
/**
 * @export
 */
export const StatsControllerGetFeesChainIdEnum = {
    NUMBER_5000: 5000,
    NUMBER_42161: 42161
} as const;
export type StatsControllerGetFeesChainIdEnum = typeof StatsControllerGetFeesChainIdEnum[keyof typeof StatsControllerGetFeesChainIdEnum];
/**
 * @export
 */
export const StatsControllerGetOpenInterestChainIdEnum = {
    NUMBER_5000: 5000,
    NUMBER_42161: 42161
} as const;
export type StatsControllerGetOpenInterestChainIdEnum = typeof StatsControllerGetOpenInterestChainIdEnum[keyof typeof StatsControllerGetOpenInterestChainIdEnum];
/**
 * @export
 */
export const StatsControllerGetTvlChainIdEnum = {
    NUMBER_5000: 5000,
    NUMBER_42161: 42161
} as const;
export type StatsControllerGetTvlChainIdEnum = typeof StatsControllerGetTvlChainIdEnum[keyof typeof StatsControllerGetTvlChainIdEnum];
/**
 * @export
 */
export const StatsControllerGetTvlForPoolChainIdEnum = {
    NUMBER_5000: 5000,
    NUMBER_42161: 42161
} as const;
export type StatsControllerGetTvlForPoolChainIdEnum = typeof StatsControllerGetTvlForPoolChainIdEnum[keyof typeof StatsControllerGetTvlForPoolChainIdEnum];
/**
 * @export
 */
export const StatsControllerGetVolumeChainIdEnum = {
    NUMBER_5000: 5000,
    NUMBER_42161: 42161
} as const;
export type StatsControllerGetVolumeChainIdEnum = typeof StatsControllerGetVolumeChainIdEnum[keyof typeof StatsControllerGetVolumeChainIdEnum];
