/* tslint:disable */
/* eslint-disable */
/**
 * Stryke API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ExerciseHistoryResponseDto,
  PrepareExerciseResponseDto,
} from '../models/index';
import {
    ExerciseHistoryResponseDtoFromJSON,
    ExerciseHistoryResponseDtoToJSON,
    PrepareExerciseResponseDtoFromJSON,
    PrepareExerciseResponseDtoToJSON,
} from '../models/index';

export interface ExerciseControllerGetExerciseTxRequest {
    chainId: ExerciseControllerGetExerciseTxChainIdEnum;
    optionMarket: string;
    optionId: number;
    swapperId: ExerciseControllerGetExerciseTxSwapperIdEnum;
    slippage: number;
}

export interface ExerciseControllerGetHistoryRequest {
    chainId: ExerciseControllerGetHistoryChainIdEnum;
    user: string;
    optionMarket: string;
    first: ExerciseControllerGetHistoryFirstEnum;
    skip: ExerciseControllerGetHistorySkipEnum;
}

/**
 * 
 */
export class ExerciseApi extends runtime.BaseAPI {

    /**
     * Get information required to exercise an options position
     */
    async exerciseControllerGetExerciseTxRaw(requestParameters: ExerciseControllerGetExerciseTxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PrepareExerciseResponseDto>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling exerciseControllerGetExerciseTx().'
            );
        }

        if (requestParameters['optionMarket'] == null) {
            throw new runtime.RequiredError(
                'optionMarket',
                'Required parameter "optionMarket" was null or undefined when calling exerciseControllerGetExerciseTx().'
            );
        }

        if (requestParameters['optionId'] == null) {
            throw new runtime.RequiredError(
                'optionId',
                'Required parameter "optionId" was null or undefined when calling exerciseControllerGetExerciseTx().'
            );
        }

        if (requestParameters['swapperId'] == null) {
            throw new runtime.RequiredError(
                'swapperId',
                'Required parameter "swapperId" was null or undefined when calling exerciseControllerGetExerciseTx().'
            );
        }

        if (requestParameters['slippage'] == null) {
            throw new runtime.RequiredError(
                'slippage',
                'Required parameter "slippage" was null or undefined when calling exerciseControllerGetExerciseTx().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        if (requestParameters['optionMarket'] != null) {
            queryParameters['optionMarket'] = requestParameters['optionMarket'];
        }

        if (requestParameters['optionId'] != null) {
            queryParameters['optionId'] = requestParameters['optionId'];
        }

        if (requestParameters['swapperId'] != null) {
            queryParameters['swapperId'] = requestParameters['swapperId'];
        }

        if (requestParameters['slippage'] != null) {
            queryParameters['slippage'] = requestParameters['slippage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clamm/exercise/prepare`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PrepareExerciseResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get information required to exercise an options position
     */
    async exerciseControllerGetExerciseTx(requestParameters: ExerciseControllerGetExerciseTxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PrepareExerciseResponseDto> {
        const response = await this.exerciseControllerGetExerciseTxRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get history of exercise activity for a user
     */
    async exerciseControllerGetHistoryRaw(requestParameters: ExerciseControllerGetHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExerciseHistoryResponseDto>> {
        if (requestParameters['chainId'] == null) {
            throw new runtime.RequiredError(
                'chainId',
                'Required parameter "chainId" was null or undefined when calling exerciseControllerGetHistory().'
            );
        }

        if (requestParameters['user'] == null) {
            throw new runtime.RequiredError(
                'user',
                'Required parameter "user" was null or undefined when calling exerciseControllerGetHistory().'
            );
        }

        if (requestParameters['optionMarket'] == null) {
            throw new runtime.RequiredError(
                'optionMarket',
                'Required parameter "optionMarket" was null or undefined when calling exerciseControllerGetHistory().'
            );
        }

        if (requestParameters['first'] == null) {
            throw new runtime.RequiredError(
                'first',
                'Required parameter "first" was null or undefined when calling exerciseControllerGetHistory().'
            );
        }

        if (requestParameters['skip'] == null) {
            throw new runtime.RequiredError(
                'skip',
                'Required parameter "skip" was null or undefined when calling exerciseControllerGetHistory().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chainId'] != null) {
            queryParameters['chainId'] = requestParameters['chainId'];
        }

        if (requestParameters['user'] != null) {
            queryParameters['user'] = requestParameters['user'];
        }

        if (requestParameters['optionMarket'] != null) {
            queryParameters['optionMarket'] = requestParameters['optionMarket'];
        }

        if (requestParameters['first'] != null) {
            queryParameters['first'] = requestParameters['first'];
        }

        if (requestParameters['skip'] != null) {
            queryParameters['skip'] = requestParameters['skip'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/clamm/exercise/history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExerciseHistoryResponseDtoFromJSON(jsonValue));
    }

    /**
     * Get history of exercise activity for a user
     */
    async exerciseControllerGetHistory(requestParameters: ExerciseControllerGetHistoryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExerciseHistoryResponseDto> {
        const response = await this.exerciseControllerGetHistoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ExerciseControllerGetExerciseTxChainIdEnum = {
    NUMBER_5000: 5000,
    NUMBER_42161: 42161
} as const;
export type ExerciseControllerGetExerciseTxChainIdEnum = typeof ExerciseControllerGetExerciseTxChainIdEnum[keyof typeof ExerciseControllerGetExerciseTxChainIdEnum];
/**
 * @export
 */
export const ExerciseControllerGetExerciseTxSwapperIdEnum = {
    _1inch: '1inch',
    UniV3: 'uni-v3'
} as const;
export type ExerciseControllerGetExerciseTxSwapperIdEnum = typeof ExerciseControllerGetExerciseTxSwapperIdEnum[keyof typeof ExerciseControllerGetExerciseTxSwapperIdEnum];
/**
 * @export
 */
export const ExerciseControllerGetHistoryChainIdEnum = {
    NUMBER_5000: 5000,
    NUMBER_42161: 42161
} as const;
export type ExerciseControllerGetHistoryChainIdEnum = typeof ExerciseControllerGetHistoryChainIdEnum[keyof typeof ExerciseControllerGetHistoryChainIdEnum];
/**
 * @export
 */
export const ExerciseControllerGetHistoryFirstEnum = {
    NUMBER_100: 100,
    NUMBER_200: 200,
    NUMBER_300: 300
} as const;
export type ExerciseControllerGetHistoryFirstEnum = typeof ExerciseControllerGetHistoryFirstEnum[keyof typeof ExerciseControllerGetHistoryFirstEnum];
/**
 * @export
 */
export const ExerciseControllerGetHistorySkipEnum = {
    NUMBER_0: 0,
    NUMBER_100: 100,
    NUMBER_200: 200
} as const;
export type ExerciseControllerGetHistorySkipEnum = typeof ExerciseControllerGetHistorySkipEnum[keyof typeof ExerciseControllerGetHistorySkipEnum];
